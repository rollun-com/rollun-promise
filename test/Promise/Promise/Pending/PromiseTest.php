<?php

namespace rollun\test\promise\Promise\Pending;

use rollun\promise\Promise\Promise;
use rollun\promise\Promise\PromiseInterface;
use rollun\promise\Promise\Exception\TimeIsOutException;
use rollun\dic\InsideConstruct;
use rollun\test\promise\Promise\DataProvider;
use rollun\promise\Promise\Exception as PromiseException;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-24 at 00:05:36.
 */
class PromiseTest extends DataProvider
{

    /**
     * @var Promise
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $container = include 'config/container.php';
        InsideConstruct::setContainer($container);
    }

    //====================== getState(); =======================================

    public function test_getState()
    {
        $promise = new Promise;
        $this->assertEquals(PromiseInterface::PENDING, $promise->getState());
    }

    //====================== wait(); ===========================================
    public function test_wait_false()
    {
        $promise = new Promise;
        $this->assertContainsOnlyInstancesOf(TimeIsOutException::class, [$promise->wait(false)]);
    }

    public function test_wait_true()
    {
        $promise = new Promise;
        $this->expectException(TimeIsOutException::class);
        $promise->wait();
    }

    //====================== resolve(); ========================================
    /**
     * @dataProvider provider_Types()
     */
    public function test_resolve_anyTypes($in)
    {
        $promise = new Promise;
        $promise->resolve($in);
        $this->assertEquals($in, $promise->wait(false));
    }

    //====================== reject(); =========================================
    public function test_reject_by_string()
    {
        $promise = new Promise;
        $promise->reject('foo');
        $this->assertEquals(PromiseInterface::REJECTED, $promise->getState());
        $this->assertStringStartsWith(
                'foo', $promise->wait(false)->getMessage()
        );
        $this->expectException(PromiseException::class);
        $promise->wait();
    }

    public function test_reject_by_Exception()
    {
        $promise = new Promise;
        $promise->reject(new \RuntimeException('foo'));
        $this->assertEquals(PromiseInterface::REJECTED, $promise->getState());
        $this->expectException(\RuntimeException::class, 'foo');
        $promise->wait();
    }

    public function test_reject_by_not_converted_to_string_value()
    {
        $promise = new Promise;
        $promise->reject(['foo']);
        $this->assertStringStartsWith(
                'Reason cannot be converted to string.', $promise->wait(false)->getMessage()
        );
        $this->expectException(\UnexpectedValueException::class);
        $promise->wait();
    }

    public function test_reject_by_fulfilled_promise()
    {
        $promise = new Promise;
        $valuePromise = new Promise;
        $valuePromise->resolve('foo');
        $promise->reject($valuePromise);
        $this->assertStringStartsWith(
                'foo', $promise->wait(false)->getMessage()
        );
        $this->expectException(PromiseException::class);
        $promise->wait();
    }

    public function test_reject_by_rejected_promise()
    {
        $promise = new Promise;
        $valuePromise = new Promise;
        $valuePromise->reject(new \LengthException('foo'));
        $promise->reject($valuePromise);
        $this->assertStringStartsWith(
                'foo', $promise->wait(false)->getMessage()
        );
        $this->expectException(\LengthException::class);
        $promise->wait();
    }

    public function test_reject_by_pending_promise()
    {
        $promise = new Promise;
        $valuePromise = new Promise;
        $promise->reject($valuePromise);
        $this->assertStringStartsWith(
                'Reason is pending promise. ID = promise_', $promise->wait(false)->getMessage()
        );
        $this->expectException(PromiseException::class);
        $promise->wait();
    }

    //====================== then(); ===========================================

    public function test_then()
    {
        $masterPromise = new Promise;
        $slavePromise = $masterPromise->then();
        $this->assertEquals(PromiseInterface::PENDING, $slavePromise->getState());
        $this->assertEquals(PromiseInterface::DEPENDENT, $slavePromise->getState(false));
    }

    public function test_then_with_callbacks()
    {
        $onFulfilled = function($value) {
            return 'After $onFulfilled - ' . $value;
        };
        $onRejected = function($value) {
            return 'After $onRejected - ' . $value->getMessage();
        };
        $masterPromise = new Promise;
        $slavePromise = $masterPromise->then($onFulfilled, $onRejected);
        $this->assertEquals(PromiseInterface::PENDING, $slavePromise->getState());
        $this->assertEquals(PromiseInterface::DEPENDENT, $slavePromise->getState(false));
    }

//
//    public function testThenAndAndReject()
//    {
//        $masterPromise = new Promise;
//        $slavePromise = $masterPromise->then();
//        $masterPromise->reject('foo');
//        $this->assertEquals(PromiseInterface::REJECTED, $slavePromise->getState());
//    }
}
