<?php

namespace rollun\test\promise\Promise\Dependent;

use rollun\promise\Promise\Promise;
use rollun\promise\Promise\PromiseInterface;
use rollun\promise\Promise\Exception\TimeIsOutException;
use rollun\dic\InsideConstruct;
use rollun\test\promise\Promise\DataProvider;
use rollun\promise\Promise\Exception\AlreadyResolvedException;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-24 at 00:05:36.
 */
class PromiseTest extends DataProvider
{

    /**
     * @var Promise
     */
    protected $object;

    public function test_getState()
    {
        $masterPromise = new Promise;
        $slavePromise = $masterPromise->then();
        $this->assertEquals(PromiseInterface::PENDING, $slavePromise->getState());
    }

    //====================== getState(); =======================================

    public function test_wait_false()
    {
        $masterPromise = new Promise;
        $slavePromise = $masterPromise->then();
        $this->assertContainsOnlyInstancesOf(TimeIsOutException::class, [$slavePromise->wait(false)]);
    }

    //====================== wait(); ===========================================

    public function test_wait_true()
    {
        $masterPromise = new Promise;
        $slavePromise = $masterPromise->then();
        $this->expectException(TimeIsOutException::class);
        $slavePromise->wait(); //it is equal ->wait(true)
    }

    public function test_resolve_slavePromise_by_masterPromise()
    {
        $masterPromise = new Promise;
        $slavePromise = $masterPromise->then();
        //TODO::  Method not has assert
        $this->assertEquals(1,1);
        $slavePromise->resolve($masterPromise);
    }

    //====================== resolve(); ========================================

    /**
     * @dataProvider provider_Types()
     */
    public function test_resolve_slavePromise_by_anyTypes($in)
    {
        $masterPromise = new Promise;
        $slavePromise = $masterPromise->then();
        $this->expectException(AlreadyResolvedException::class);
        $this->expectExceptionMessageRegExp('|.*(You can resolve dependent promise only by its master promise).*|');
        $slavePromise->resolve($in);
    }

    /**
     * @dataProvider provider_Types()
     */
    public function test_resolve_masterPromise_by_anyTypes($in)
    {
        $masterPromise = new Promise;
        $slavePromise = $masterPromise->then();
        $masterPromise->resolve($in);
        $this->assertEquals(PromiseInterface::FULFILLED, $slavePromise->getState());
        $this->assertEquals($in, $slavePromise->wait(false));
    }

    public function test_reject_slavePromise_by_TimeIsOutException()
    {
        $masterPromise = new Promise;
        $slavePromise = $masterPromise->then();
        $slavePromise->reject(new TimeIsOutException('foo'));
        $this->assertEquals(PromiseInterface::REJECTED, $slavePromise->getState());
    }

    //====================== reject(); =========================================

    public function test_reject_slavePromise_by_masterPromise()
    {
        $masterPromise = new Promise;
        $slavePromise = $masterPromise->then();
        $this->expectException(AlreadyResolvedException::class);
        $this->expectExceptionMessageRegExp( '|.*(You can resolve dependent promise only by its master promise).*|');
        $slavePromise->reject($masterPromise);
    }

    /**
     * @dataProvider provider_Types()
     */
    public function test_reject_slavePromise_by_anyTypes($in)
    {
        $masterPromise = new Promise;
        $slavePromise = $masterPromise->then();
        $this->expectException(AlreadyResolvedException::class);
        $this->expectExceptionMessageRegExp('|(You can resolve dependent promise only by its master promise)|');
        $slavePromise->reject($in);
    }

    public function test_then()
    {
        $masterPromise = new Promise;
        $slavePromise = $masterPromise->then();
        $slaveOfSlavePromise = $slavePromise->then();
        $this->assertEquals(PromiseInterface::DEPENDENT, $slaveOfSlavePromise->getState(false));
        $this->assertContainsOnlyInstancesOf(TimeIsOutException::class, [$slavePromise->wait(false)]);
    }

    //====================== then(); ===========================================

    public function test_then_with_callbacks_resolve_onFulfilled_fulfilled()
    {
        $onFulfilled = function ($value) {
            return 'After $onFulfilled - ' . $value;
        };
        $onRejected = function ($value) {
            return 'After $onRejected - ' . $value->getMessage();
        };
        $masterPromise = new Promise;
        $slavePromise = $masterPromise->then();
        $slaveOfSlavePromise = $slavePromise->then($onFulfilled, $onRejected);
        $masterPromise->resolve('foo');
        $this->assertEquals(PromiseInterface::FULFILLED, $slavePromise->getState());
        $this->assertEquals('foo', $slavePromise->wait(false));
        $this->assertEquals(PromiseInterface::FULFILLED, $slaveOfSlavePromise->getState());
        $this->assertEquals('After $onFulfilled - foo', $slaveOfSlavePromise->wait(false));
    }

    public function test_then_with_callbacks_reject_onRejected_fulfilled()
    {
        $onFulfilled = function ($value) {
            return 'After $onFulfilled - ' . $value;
        };
        $onRejected = function ($value) {
            return 'After $onRejected - ' . $value->getMessage();
        };
        $masterPromise = new Promise;
        $slavePromise = $masterPromise->then();
        $slaveOfSlavePromise = $slavePromise->then($onFulfilled, $onRejected);
        $masterPromise->reject('foo');
        $this->assertEquals(PromiseInterface::REJECTED, $slavePromise->getState());
        $this->assertEquals('foo', $slavePromise->wait(false)->getMessage());
        $this->assertEquals(PromiseInterface::FULFILLED, $slaveOfSlavePromise->getState());
        $this->assertEquals('After $onRejected - foo', $slaveOfSlavePromise->wait(false));
    }

    public function test_then_with_callbacks_reject_onRejected_rejected()
    {
        $onFulfilled = function ($value) {
            return 'After $onFulfilled - ' . $value;
        };
        $onRejected = function ($value) {
            throw new \RuntimeException('After $onRejected - ' . $value->getMessage(), 0, $value);
        };
        $masterPromise = new Promise;
        $slavePromise = $masterPromise->then();
        $slaveOfSlavePromise = $slavePromise->then($onFulfilled, $onRejected);
        $masterPromise->reject('foo');
        $this->assertEquals(PromiseInterface::REJECTED, $slavePromise->getState());
        $this->assertEquals('foo', $slavePromise->wait(false)->getMessage());
        $this->assertEquals(PromiseInterface::REJECTED, $slaveOfSlavePromise->getState());
        $this->assertEquals('After $onRejected - foo', $slaveOfSlavePromise->wait(false)->getMessage());
    }

    public function test_then_with_callbacks_resolve_ExceptionInOnFulfilled()
    {
        $onFulfilled = function ($value) {
            throw new \LengthException('Exception in onFulfilled()');
        };
        $masterPromise = new Promise;
        $slavePromise = $masterPromise->then();
        $slaveOfSlavePromise = $slavePromise->then($onFulfilled);
        $masterPromise->resolve('foo');
        $this->assertEquals(PromiseInterface::FULFILLED, $slavePromise->getState());
        $this->assertEquals('foo', $slavePromise->wait(false));
        $this->assertEquals(PromiseInterface::REJECTED, $slaveOfSlavePromise->getState());
        $this->assertEquals('Exception in onFulfilled()', $slaveOfSlavePromise->wait(false)->getMessage());
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $container = include 'config/container.php';
        InsideConstruct::setContainer($container);
    }
}
