<?php

namespace rollun\promise\Entity;

use rollun\promise\Entity\Store as EntityStore;
use zaboy\res\Di\InsideConstruct;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-21 at 09:50:49.
 */
class StoreTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Store
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $container = include 'config/container.php';
        InsideConstruct::setContainer($container);
        $this->object = new EntityStore;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        //$this->object->delete('1=1');
    }

    /**
     * @covers rollun\promise\Entity\Store::commit
     */
    public function testCommit()
    {
        $this->object->delete([EntityStore::ID => 'key1']);
        $this->assertEquals(0, $this->object->count());
        $this->object->beginTransaction();
        $this->object->insert([EntityStore::ID => 'key1']);
        $this->object->commit();
        $this->assertEquals(1, $this->object->count());
        $this->object->delete([EntityStore::ID => 'key1']);
    }

    /**
     * @covers rollun\promise\Entity\Store::rollback
     */
    public function testRollback()
    {
        $this->object->delete([EntityStore::ID => 'key1']);
        $this->assertEquals(0, $this->object->count());
        $this->object->beginTransaction();
        $this->object->insert([EntityStore::ID => 'key1']);
        $this->assertEquals(1, $this->object->count());
        $this->object->rollback();
        $this->assertEquals(0, $this->object->count());
        $this->object->delete([EntityStore::ID => 'key1']);
    }

    /**
     * @covers rollun\promise\Entity\Store::insert
     * @covers rollun\promise\Entity\Store::read
     */
    public function test_Insert_and_Read()
    {
        $this->object->delete([EntityStore::ID => 'key1']);
        $data = $this->object->read('key1');
        $this->assertNull($data);
        $this->object->insert([EntityStore::ID => 'key1']);
        $data = $this->object->read('key1');
        $this->assertEquals(['id' => 'key1'], $data);
        $this->object->delete([EntityStore::ID => 'key1']);
    }

    /**
     * @covers rollun\promise\Entity\Store::count
     */
    public function testCount()
    {
        $this->object->delete([EntityStore::ID => 'key1']);
        $this->assertEquals(0, $this->object->count());
        $this->object->insert([EntityStore::ID => 'key1']);
        $this->assertEquals(1, $this->object->count());
        $this->object->delete([EntityStore::ID => 'key1']);
    }

}
